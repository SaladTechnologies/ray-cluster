server {
    listen 8000; 
    listen [::]:8000;  # IPv6 support for SaladCloud's Container Gateway
    
    server_name _; 
    
    # Handle root path with a simple HTML page
    location = / {
        return 200 '<!DOCTYPE html>
        <html>
        <head><title>Ray</title></head>
        <body>
            <h1>A Single-Node Ray Cluster</h1>
            <ul>
                <li><a href="/ray/">Ray Dashboard (IPv4, 8265)</a></li>
                <li><a href="/jupyter/">JupyterLab(IPv4/v6,8889)</a></li>
                <li>Nginx (IPv4/v6, 8000)</li>
                <li>ssh root@tailscale-ip</li>
                <li>tailscale status</li>
                <li>tailscale ip</li>
                <li>tailscale ping tailscale-ip</li>
                <li>ALL_PROXY=socks5://localhost:1055/ curl http://tailscale-ip</li>
                <li>http_proxy=http://localhost:1055/ curl http://tailscale-ip</li>
                <li>proxychains4 curl http://tailscale-ip</li>
                <li>python -m http.server 8000</li>
            </ul>
        </body>
        </html>';
        add_header Content-Type text/html;
    }


    # Ray's frontend is built with hardcoded absolute paths 
    # Ray doesn't need to know itâ€™s mounted behind /ray/, because it ignores the prefix.
    location /ray/ {
        proxy_pass http://localhost:8265/;
        proxy_set_header Host $host;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    # JupyterLab uses a mix of relative and absolute URLs
    # Ensure that the Jupyter base URL matches exactly what the browser sees
    location /jupyter/ {
        proxy_pass http://localhost:8889/jupyter/;
        proxy_set_header Host $host;
        proxy_http_version 1.1;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
}

